{"map":"{\"version\":3,\"sources\":[\"/Users/nbauer/git/react-blog/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-5-0!/Users/nbauer/git/react-blog/node_modules/css-loader/dist/cjs.js??ref--6-oneOf-5-1!/Users/nbauer/git/react-blog/node_modules/postcss-loader/src/index.js??postcss!/Users/nbauer/git/react-blog/src/components/TagIndexPage.module.css\",\"/Users/nbauer/git/react-blog/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-5-0!/Users/nbauer/git/react-blog/node_modules/css-loader/dist/cjs.js??ref--6-oneOf-5-1!/Users/nbauer/git/react-blog/node_modules/postcss-loader/src/index.js??postcss!/Users/nbauer/git/react-blog/src/components/TagPage.module.css\",\"/Users/nbauer/git/react-blog/src/components/TagIndexPage.js\",\"/Users/nbauer/git/react-blog/src/components/TagPage.js\",\"/Users/nbauer/git/react-blog/src/routes/tags.js\"],\"names\":[\"module\",\"exports\",\"TagIndexPage\",\"TagPage\",\"props\",\"react_default\",\"a\",\"createElement\",\"className\",\"styles\",\"tags\",\"map\",\"tag\",\"key\",\"href\",\"dist_es\",\"name\",\"count\",\"blogRoot\",\"routes\",\"route\",\"url\",\"ArticleSummary\",\"crawlRoutes\",\"_callee4\",\"root\",\"_yield$crawl\",\"paths\",\"regenerator_default\",\"wrap\",\"_context4\",\"prev\",\"next\",\"cache\",\"crawl\",\"context\",\"crawlingRoutes\",\"sent\",\"resolve\",\"method\",\"urls\",\"abrupt\",\"stop\",\"tagRoutes\",\"compose\",\"withContext\",\"req\",\"Object\",\"objectSpread2\",\"tagsRoot\",\"mountpath\",\"withCrawlerPatterns\",\"/:tag\",\"_tag\",\"asyncToGenerator\",\"mark\",\"_callee\",\"_context\",\"t0\",\"getAvailableTagsFromRoutes\",\"t1\",\"_x2\",\"_x3\",\"apply\",\"this\",\"arguments\",\"mount\",\"/\",\"title\",\"getView\",\"_getView\",\"_callee2\",\"_context2\",\"fromPairs\",\"toLowerCase\",\"forEach\",\"data\",\"push\",\"components_TagIndexPage\",\"join\",\"length\",\"_x4\",\"_x5\",\"getTitle\",\"params\",\"_getView2\",\"_callee3\",\"lowerCaseTag\",\"_context3\",\"find\",\"metaTag\",\"components_TagPage\",\"_x6\",\"_x7\",\"Array\",\"from\",\"Set\",\"concat\"],\"mappings\":\"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\",\"sourcesContent\":[\"// extracted by mini-css-extract-plugin\\nmodule.exports = {\\\"TagIndexPage\\\":\\\"TagIndexPage_TagIndexPage__1KLH1\\\"};\",\"// extracted by mini-css-extract-plugin\\nmodule.exports = {\\\"TagPage\\\":\\\"TagPage_TagPage__2Zrai\\\"};\",\"import React from 'react'\\nimport { Link } from 'react-navi'\\nimport styles from './TagIndexPage.module.css'\\n\\nfunction TagIndexPage(props) {\\n  return (\\n    <div className={styles.TagIndexPage}>\\n      <h1>Tags</h1>\\n      <ul>\\n        {props.tags.map(tag =>\\n          <li key={tag.href}>\\n            <Link href={tag.href}>{tag.name} ({tag.count})</Link>\\n          </li>  \\n        )}\\n      </ul>\\n    </div>\\n  )\\n}\\n\\nexport default TagIndexPage\",\"import React from 'react'\\nimport ArticleSummary from './ArticleSummary'\\nimport styles from './TagPage.module.css'\\n\\nfunction TagPage({ blogRoot, name, routes }) {\\n  return (\\n    <div className={styles.TagPage}>\\n      <h1>{name} posts</h1>\\n      <ul>\\n        {routes.map(route =>\\n          <li key={route.url.href}>\\n            <ArticleSummary blogRoot={blogRoot} route={route} />\\n          </li>  \\n        )}\\n      </ul>\\n    </div>\\n  )\\n}\\n\\nexport default TagPage\",\"import React from 'react'\\nimport { compose, crawl, mount, resolve, route, withContext, withCrawlerPatterns } from 'navi'\\nimport { join } from 'path'\\nimport { fromPairs } from 'lodash'\\nimport TagIndexPage from '../components/TagIndexPage'\\nimport TagPage from '../components/TagPage'\\nimport routes from './index'\\n\\nasync function crawlRoutes(root) {\\n  if (!crawlRoutes.cache[root]) {\\n    let { paths } = await crawl({\\n      context: {\\n        crawlingRoutes: true,\\n      },\\n      root,\\n      routes,\\n    })\\n    crawlRoutes.cache[root] = await resolve({\\n      method: 'HEAD',\\n      routes,\\n      urls: paths,\\n    }) \\n  }\\n  return crawlRoutes.cache[root]\\n}\\ncrawlRoutes.cache = {}\\n\\nconst tagRoutes = compose(\\n  withContext((req, context) => ({\\n    ...context,\\n    tagsRoot: req.mountpath,\\n  })),\\n  withCrawlerPatterns({\\n    '/:tag': async (req, context) => {\\n      if (!context.crawlingRoutes) {\\n        return getAvailableTagsFromRoutes(\\n          await crawlRoutes(context.blogRoot)\\n        ).map(tag => '/'+tag)\\n      }\\n      return []\\n    }\\n  }),\\n  mount({\\n    '/': route({\\n      title: 'Tags',\\n\\n      getView: async (req, context) => {\\n        // Build a list of pages for each tag\\n        let routes = await crawlRoutes(context.blogRoot)\\n        let tags = getAvailableTagsFromRoutes(routes)\\n        let tagRoutes = fromPairs(tags.map(name => [name.toLowerCase(), []]))\\n        routes.forEach(route => {\\n          let data = route.data\\n          if (data && data.tags) {\\n            data.tags.forEach(tag => {\\n              tag = tag.toLowerCase()\\n              if (tagRoutes[tag]) {\\n                tagRoutes[tag].push(route)\\n              }\\n            })\\n          }\\n        })\\n\\n        return (\\n          <TagIndexPage\\n            blogRoot={context.blogRoot}\\n            tags={tags.map(name => ({\\n              name,\\n              href: join(req.mountpath, name.toLowerCase()),\\n              count: (tagRoutes[name] || []).length,\\n            }))}\\n          />\\n        )\\n      },\\n    }),\\n\\n    '/:tag': route({\\n      getTitle: req => req.params.tag,\\n      getView: async (req, context) => {\\n        let lowerCaseTag = req.params.tag.toLowerCase()\\n        let routes = await crawlRoutes(context.blogRoot)\\n\\n        // Build a list of pages that include the tag from the site map\\n        let tagRoutes = []\\n        routes.forEach(route => {\\n          let tags = (route.data && route.data.tags) || []\\n          if (tags.find(metaTag => metaTag.toLowerCase() === lowerCaseTag)) {\\n            tagRoutes.push(route)\\n          }\\n        })\\n\\n        return (\\n          <TagPage\\n            blogRoot={context.blogRoot}\\n            name={req.params.tag}\\n            routes={tagRoutes}\\n          />\\n        )\\n      },\\n    }),\\n  }),\\n)\\n\\nfunction getAvailableTagsFromRoutes(routes) {\\n  return Array.from(\\n    new Set(\\n      [].concat(...routes.map(route => (route.data && route.data.tags) || [])),\\n    ),\\n  )\\n}\\n\\nexport default tagRoutes\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{46:function(e,t,a){e.exports={TagIndexPage:\"TagIndexPage_TagIndexPage__1KLH1\"}},47:function(e,t,a){e.exports={TagPage:\"TagPage_TagPage__2Zrai\"}},56:function(e,t,a){\"use strict\";a.r(t);var r=a(4),n=a.n(r),o=a(8),c=a(7),u=a(0),s=a.n(u),i=a(1),l=a(6),p=a(10),g=a(3),f=a(46),m=a.n(f);var b=function(e){return s.a.createElement(\"div\",{className:m.a.TagIndexPage},s.a.createElement(\"h1\",null,\"Tags\"),s.a.createElement(\"ul\",null,e.tags.map(e=>s.a.createElement(\"li\",{key:e.href},s.a.createElement(g.Link,{href:e.href},e.name,\" (\",e.count,\")\")))))},h=a(22),w=a(47),d=a.n(w);var j=function({blogRoot:e,name:t,routes:a}){return s.a.createElement(\"div\",{className:d.a.TagPage},s.a.createElement(\"h1\",null,t,\" posts\"),s.a.createElement(\"ul\",null,a.map(t=>s.a.createElement(\"li\",{key:t.url.href},s.a.createElement(h.a,{blogRoot:e,route:t})))))},x=a(15);function E(e){return O.apply(this,arguments)}function O(){return(O=Object(c.a)(n.a.mark(function e(t){var a,r;return n.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(E.cache[t]){e.next=8;break}return e.next=3,Object(i.c)({context:{crawlingRoutes:!0},root:t,routes:x.a});case 3:return a=e.sent,r=a.paths,e.next=7,Object(i.l)({method:\"HEAD\",routes:x.a,urls:r});case 7:E.cache[t]=e.sent;case 8:return e.abrupt(\"return\",E.cache[t]);case 9:case\"end\":return e.stop()}},e)}))).apply(this,arguments)}E.cache={};const v=Object(i.b)(Object(i.n)((e,t)=>Object(o.a)(Object(o.a)({},t),{},{tagsRoot:e.mountpath})),Object(i.o)({\"/:tag\":function(){var e=Object(c.a)(n.a.mark(function e(t,a){return n.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(a.crawlingRoutes){e.next=6;break}return e.t0=R,e.next=4,E(a.blogRoot);case 4:return e.t1=e.sent,e.abrupt(\"return\",(0,e.t0)(e.t1).map(e=>\"/\"+e));case 6:return e.abrupt(\"return\",[]);case 7:case\"end\":return e.stop()}},e)}));return function(t,a){return e.apply(this,arguments)}}()}),Object(i.j)({\"/\":Object(i.m)({title:\"Tags\",getView:function(){var e=Object(c.a)(n.a.mark(function e(t,a){var r,o,c;return n.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,E(a.blogRoot);case 2:return r=e.sent,o=R(r),c=Object(p.fromPairs)(o.map(e=>[e.toLowerCase(),[]])),r.forEach(e=>{let t=e.data;t&&t.tags&&t.tags.forEach(t=>{t=t.toLowerCase(),c[t]&&c[t].push(e)})}),e.abrupt(\"return\",s.a.createElement(b,{blogRoot:a.blogRoot,tags:o.map(e=>({name:e,href:Object(l.join)(t.mountpath,e.toLowerCase()),count:(c[e]||[]).length}))}));case 7:case\"end\":return e.stop()}},e)}));return function(t,a){return e.apply(this,arguments)}}()}),\"/:tag\":Object(i.m)({getTitle:e=>e.params.tag,getView:function(){var e=Object(c.a)(n.a.mark(function e(t,a){var r,o,c;return n.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.params.tag.toLowerCase(),e.next=3,E(a.blogRoot);case 3:return o=e.sent,c=[],o.forEach(e=>{(e.data&&e.data.tags||[]).find(e=>e.toLowerCase()===r)&&c.push(e)}),e.abrupt(\"return\",s.a.createElement(j,{blogRoot:a.blogRoot,name:t.params.tag,routes:c}));case 7:case\"end\":return e.stop()}},e)}));return function(t,a){return e.apply(this,arguments)}}()})}));function R(e){return Array.from(new Set([].concat(...e.map(e=>e.data&&e.data.tags||[]))))}t.default=v}}]);","extractedComments":[]}