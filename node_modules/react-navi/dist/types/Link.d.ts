import * as React from 'react';
import { URLDescriptor } from 'navi';
import { HashScrollBehavior } from './HashScroll';
export interface UseLinkPropsOptions {
    children?: any;
    className?: string;
    disabled?: boolean;
    hashScrollBehavior?: HashScrollBehavior;
    hidden?: boolean;
    href: string | Partial<URLDescriptor>;
    id?: string;
    lang?: string;
    prefetch?: boolean;
    rel?: string;
    style?: object;
    tabIndex?: number;
    target?: string;
    title?: string;
    onClick?: React.MouseEventHandler<HTMLAnchorElement>;
}
/**
 * Returns a boolean that indicates whether the user is currently
 * viewing the specified href.
 * @param href
 * @param options.exact If false, will match any URL underneath this href
 * @param options.loading If true, will match even if the route is currently loading
 */
export declare const useActive: (href: string | Partial<URLDescriptor>, { exact, loading, }?: {
    /**
     * If false, will return true even if viewing a child of this route.
     */
    exact?: boolean | undefined;
    /**
     * If true, this will return true even if the route is currently just
     * loading.
     */
    loading?: boolean | undefined;
}) => boolean;
export declare const useLinkProps: ({ disabled, hashScrollBehavior, href, prefetch, target, onClick, ...rest }: UseLinkPropsOptions) => {
    children?: any;
    className?: string | undefined;
    hidden?: boolean | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    rel?: string | undefined;
    style?: object | undefined;
    tabIndex?: number | undefined;
    title?: string | undefined;
    disabled: boolean | undefined;
    onClick: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
    href: string;
};
export interface LinkProps {
    active?: boolean;
    activeClassName?: string;
    activeStyle?: object;
    children?: any;
    className?: string;
    disabled?: boolean;
    exact?: boolean;
    hashScrollBehavior?: HashScrollBehavior;
    hidden?: boolean;
    href: string | Partial<URLDescriptor>;
    id?: string;
    lang?: string;
    prefetch?: boolean;
    ref?: React.Ref<HTMLAnchorElement>;
    rel?: string;
    style?: object;
    tabIndex?: number;
    target?: string;
    title?: string;
    onClick?: React.MouseEventHandler<HTMLAnchorElement>;
    render?: (props: LinkRendererProps) => any;
}
export interface LinkRendererProps {
    anchorProps: LinkContext;
    active: boolean;
    activeClassName?: string;
    activeStyle?: object;
    children: any;
    className?: string;
    disabled?: boolean;
    tabIndex?: number;
    hidden?: boolean;
    href: string;
    id?: string;
    lang?: string;
    style?: object;
    target?: string;
    title?: string;
    onClick: React.MouseEventHandler<any>;
}
export interface LinkAnchorProps extends LinkContext {
}
export declare const LinkContext: React.Context<LinkContext>;
export interface LinkContext {
    onClick: (event: React.MouseEvent<HTMLAnchorElement>) => void;
    ref: React.Ref<HTMLAnchorElement>;
    id?: string;
    lang?: string;
    rel?: string;
    tabIndex?: number;
    target?: string;
    title?: string;
    href?: string;
}
export declare class LinkAnchor extends React.Component<React.AnchorHTMLAttributes<HTMLAnchorElement> & {
    fromDefaultRenderer?: boolean;
}> {
    constructor(props: any);
    render(): JSX.Element;
    renderChildren: (context: LinkContext) => JSX.Element;
}
export declare namespace Link {
    type Props = LinkProps;
    type RendererProps = LinkRendererProps;
    type AnchorProps = LinkAnchorProps;
}
export declare const Link: (React.ComponentClass<LinkProps & React.ClassAttributes<HTMLAnchorElement>> & {
    Anchor: typeof LinkAnchor;
}) | (React.StatelessComponent<LinkProps & React.ClassAttributes<HTMLAnchorElement>> & {
    Anchor: typeof LinkAnchor;
});
