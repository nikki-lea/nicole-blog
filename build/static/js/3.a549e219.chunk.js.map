{"version":3,"sources":["components/TagIndexPage.module.css","components/TagPage.module.css","components/TagIndexPage.js","components/TagPage.js","routes/tags.js"],"names":["module","exports","TagIndexPage","TagPage","props","react_default","a","createElement","className","styles","tags","map","tag","key","href","dist_es","name","count","blogRoot","routes","route","url","ArticleSummary","crawlRoutes","_callee4","root","_yield$crawl","paths","regenerator_default","wrap","_context4","prev","next","cache","crawl","context","crawlingRoutes","sent","resolve","method","urls","abrupt","stop","tagRoutes","compose","withContext","req","Object","objectSpread2","tagsRoot","mountpath","withCrawlerPatterns","/:tag","_tag","asyncToGenerator","mark","_callee","_context","t0","getAvailableTagsFromRoutes","t1","_x2","_x3","apply","this","arguments","mount","/","title","getView","_getView","_callee2","_context2","fromPairs","toLowerCase","forEach","data","push","components_TagIndexPage","join","length","_x4","_x5","getTitle","params","_getView2","_callee3","lowerCaseTag","_context3","find","metaTag","components_TagPage","_x6","_x7","Array","from","Set","concat"],"mappings":"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","file":"static/js/3.a549e219.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TagIndexPage\":\"TagIndexPage_TagIndexPage__1KLH1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TagPage\":\"TagPage_TagPage__2Zrai\"};","import React from 'react'\nimport { Link } from 'react-navi'\nimport styles from './TagIndexPage.module.css'\n\nfunction TagIndexPage(props) {\n  return (\n    <div className={styles.TagIndexPage}>\n      <h1>Tags</h1>\n      <ul>\n        {props.tags.map(tag =>\n          <li key={tag.href}>\n            <Link href={tag.href}>{tag.name} ({tag.count})</Link>\n          </li>  \n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default TagIndexPage","import React from 'react'\nimport ArticleSummary from './ArticleSummary'\nimport styles from './TagPage.module.css'\n\nfunction TagPage({ blogRoot, name, routes }) {\n  return (\n    <div className={styles.TagPage}>\n      <h1>{name} posts</h1>\n      <ul>\n        {routes.map(route =>\n          <li key={route.url.href}>\n            <ArticleSummary blogRoot={blogRoot} route={route} />\n          </li>  \n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default TagPage","import React from 'react'\nimport { compose, crawl, mount, resolve, route, withContext, withCrawlerPatterns } from 'navi'\nimport { join } from 'path'\nimport { fromPairs } from 'lodash'\nimport TagIndexPage from '../components/TagIndexPage'\nimport TagPage from '../components/TagPage'\nimport routes from './index'\n\nasync function crawlRoutes(root) {\n  if (!crawlRoutes.cache[root]) {\n    let { paths } = await crawl({\n      context: {\n        crawlingRoutes: true,\n      },\n      root,\n      routes,\n    })\n    crawlRoutes.cache[root] = await resolve({\n      method: 'HEAD',\n      routes,\n      urls: paths,\n    }) \n  }\n  return crawlRoutes.cache[root]\n}\ncrawlRoutes.cache = {}\n\nconst tagRoutes = compose(\n  withContext((req, context) => ({\n    ...context,\n    tagsRoot: req.mountpath,\n  })),\n  withCrawlerPatterns({\n    '/:tag': async (req, context) => {\n      if (!context.crawlingRoutes) {\n        return getAvailableTagsFromRoutes(\n          await crawlRoutes(context.blogRoot)\n        ).map(tag => '/'+tag)\n      }\n      return []\n    }\n  }),\n  mount({\n    '/': route({\n      title: 'Tags',\n\n      getView: async (req, context) => {\n        // Build a list of pages for each tag\n        let routes = await crawlRoutes(context.blogRoot)\n        let tags = getAvailableTagsFromRoutes(routes)\n        let tagRoutes = fromPairs(tags.map(name => [name.toLowerCase(), []]))\n        routes.forEach(route => {\n          let data = route.data\n          if (data && data.tags) {\n            data.tags.forEach(tag => {\n              tag = tag.toLowerCase()\n              if (tagRoutes[tag]) {\n                tagRoutes[tag].push(route)\n              }\n            })\n          }\n        })\n\n        return (\n          <TagIndexPage\n            blogRoot={context.blogRoot}\n            tags={tags.map(name => ({\n              name,\n              href: join(req.mountpath, name.toLowerCase()),\n              count: (tagRoutes[name] || []).length,\n            }))}\n          />\n        )\n      },\n    }),\n\n    '/:tag': route({\n      getTitle: req => req.params.tag,\n      getView: async (req, context) => {\n        let lowerCaseTag = req.params.tag.toLowerCase()\n        let routes = await crawlRoutes(context.blogRoot)\n\n        // Build a list of pages that include the tag from the site map\n        let tagRoutes = []\n        routes.forEach(route => {\n          let tags = (route.data && route.data.tags) || []\n          if (tags.find(metaTag => metaTag.toLowerCase() === lowerCaseTag)) {\n            tagRoutes.push(route)\n          }\n        })\n\n        return (\n          <TagPage\n            blogRoot={context.blogRoot}\n            name={req.params.tag}\n            routes={tagRoutes}\n          />\n        )\n      },\n    }),\n  }),\n)\n\nfunction getAvailableTagsFromRoutes(routes) {\n  return Array.from(\n    new Set(\n      [].concat(...routes.map(route => (route.data && route.data.tags) || [])),\n    ),\n  )\n}\n\nexport default tagRoutes\n"],"sourceRoot":""}